
This ReadMe contains the following:

    Module description
    System requirements
    A list of the input files needed to run the module
    Installation instructions
    Workflow instructions



DESCRIPTION

A series of programs useful for generating a Synthetic In-Silico Genome in a
step-by-step manner.



REQUIREMENTS (SYSTEM)

This program requires the following files from the following modules:

    File_Reader module: (https://github.com/AHCChan/File_Reader)
        File_Reader.py
        FASTA_File_Reader.py
        Chr_FASTA_File_Reader.py
        Table_File_Reader.py

    File_Writer module: (https://github.com/AHCChan/File_Writer)
        File_Writer.py
        Width_File_Writer.py

    Python_Command_Line_Tools module: (https://github.com/AHCChan/Python_Command_Line_Tools)
        _Command_Line_Parser.py
        _Controlled_Print.py

    NSeq_Match module: (https://github.com/AHCChan/NSeq_Match)
        NSeq_Match.py

    ECSASS_Parser module: (https://github.com/AHCChan/ECSASS_Parser)
        ECSASS_Parser.py

    Phred_Library module: (https://github.com/AHCChan/Phred_Library)
        Phred.py
    


This program runs in Python 2. It will not work properly with Python 3.
Please ensure you have Python 2 installed on your computer.
Please ensure you are using the correct version of Python to run this program.



REQUIREMENTS (INPUT FILES)

A featureless, bare minimum synthetic genome only requires the following input
files:

    1) A chromosome sizes file

However, a standard synthetic genome would require the following input files:

    1) A chromosome sizes file
    2) ...
    3) ...



INSTRUCTIONS (SETUP)

You don't need to know how to use git to get this program, nor the libraries 
which this program needs to run.

You can simply open the files:
    File_Reader.py
    FASTA_File_Reader.py
    Chr_FASTA_File_Reader.py
    Table_File_Reader.py
    File_Writer.py
    Width_File_Writer.py
    _Command_Line_Parser.py
    _Controlled_Print.py
    NSeq_Match.py
    ECSASS_Parser.py
    Phred.py

... in your online browser and copy their contents onto a local file on your
computer with the same name. Ensure that these files are in the same folder.

Supporting files are available at:
    https://github.com/AHCChan/File_Reader
    https://github.com/AHCChan/File_Writer
    https://github.com/AHCChan/Python_Command_Line_Tools
    https://github.com/AHCChan/NSeq_Match
    https://github.com/AHCChan/ECSASS_Parser
    https://github.com/AHCChan/Phred_Library



INSTRUCTIONS (HOW TO USE)

You don't need to know how to use git to use this program. You can simply open
the Python files in your online browser and copy their contents into a local 
file on your computer with the same name.

To run the program, open up a command line window and enter one of the 
following commands (substituting the appropriate file paths) to bring up the 
relevant help doc:

    C:\Path\To\Python\python.exe C:\Path\To\The\File\Generate_Random_Chromosomes.py -h

    C:\Path\To\Python\python.exe C:\Path\To\The\File\Sequence_Extractor.py -h

    C:\Path\To\Python\python.exe C:\Path\To\The\File\Sequence_Inserter.py -h

    C:\Path\To\Python\python.exe C:\Path\To\The\File\Generate_Fragments.py -h

    C:\Path\To\Python\python.exe C:\Path\To\The\File\Generate_Reads.py -h

You should get a large wall of text explaining how to use this program, along
with some examples.

Alternatively, code in these files can be used as a module by other Python 
programs using standard import methods.



INSTRUCTIONS (WORKFLOW)

1)  Generate_Random_Chromosomes.py
        
        Begin by generating synthetic chromosomes of random nucleotides based 
        on  specified chromsome sizes and nucleotide distribution settings.
        
        Alternatively, use existing chromosomal sequences.

2)  Sequence_Extractor.py
        
        Extract genetic elements such as genes, transposable elements, and 
        regulatory sequences from the genome assembly of a real organism.
        
        This will result in a folder containing the post-excision genome, a
        folder containing all of the excised genetic sequences, and a
        coordinates table.
        
        If the goal is the mutate an existing genome, then all three outputs
        will be relevant.
        
        If the goal is only to obtain some authentic genetic sequences to use
        on a synthetic template (such as the one generated by
        Generate_Random_Chromosomes.py), then only the folder of excised 
        sequences and the meta data in the output coordinates table is
        relevant.

3)  (Alter elements)
        
        Alter the genetic elements by altering the coordinates table created
        in step 2. Transpositions and inversions can be made be altering the
        genomic coordinates of the sequences, while substitution mutations,
        indels, fragmentations, chimerization, and more can be made by altering
        the ECSASS sequence.
        
        After all changes have been made, sort the table using the genomic
        coordinates to ensure that the genetic elements are listed in genomic
        order.
        
        Currently, this must be done manually. An automated method to perform
        this on a large scale has yet to be implemented. A sorting program is
        also planned but not yet implemented.

4)  Sequence_Inserter.py
        
        Insert the genetic elements into either the post-excision genome from
        STEP 2 or into your synthetic template from STEP 1.
        
        This will result in a folder containing the post-insertion genome, a
        coordinates table, and a new chromosome sizes file which is often
        required in various bioinformatics programs.

4)  Generate_Fragments.py
        
        The first half of simulated Next-Gen-Sequencing process.
        
        Derive a number of nucleotide "fragments" from the synthetic genome. 
        These fragments may overlap.

5)  Generate_Reads.py
        
        The second half of simulated Next-Gen-Sequencing process.
        
        Derive a number of "sequencing reads" from the nucleotide "fragments". 



OTHER USEFUL TOOLS

The Table_To_Table.py tool (https://github.com/AHCChan/Table_To_Table) is
useful for taking genome coordinates table files (such as RMSK files) and
converting them into a format which is suitable to be used as inputs for
components of this pipeline.



TESTING AND FEEDBACK

The files provided in the Testing_Before and Testing_After folders can be used 
as a reference for making sure the program works properly and/or for 
implementing this in another language. The Testing_Before folder contains all
the input files required to run the tests, while the Testing_After folder
contains the required input files, as well as examples of the files which
should be generated as a result of running the code in Testing_Commands.txt.

Note that due to Nucleotide sequences being randomly generated, the resulting
files will be different each run. Discretion is advised when confirming whether
or not the programs are working as intended.

Feel free to contact Angelo Chan (angelo.hoi.chung.chan@gmail.com) if you have
any questions, feedback, or bugs to report.


 