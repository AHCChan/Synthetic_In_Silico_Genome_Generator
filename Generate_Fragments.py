HELP_DOC = """
FRAGMENT GENERATOR
(version 1.0)
by Angelo Chan

This is a program for generating DNA fragment sequences based on a template,
typically a genome.

In the context of a synthetic genome, this program will be used to generate
fragments from the genome, mimicking the DNA fragmentation process. Afterwards,
smaller sequences will be generated from the fragments, mimicking the NGS DNA
sequencing process.

The expected input is a folder containing one or more FASTA files. The fragments
will be output into a single FASTA file.



BACKGROUND INFO:

In whole genome next-gen sequencing protocols, the genome is fragmented into
smaller DNA fragments. However, with many sequencing technologies and protocols,
only the ends of the fragments are sequenced into reads.

Therefore, to achieve a desired level of coverage with a reads library, users
will typically need to generate a fragment library with a higher level of
coverage.

The formula is as follows:

    FRAG_COVERAGE = READ_COVERAGE * ( READ_SIZE / FRAG_SIZE)
        
        READ_SIZE is the size (bp) of the read(s) generated by the sequencer

        FRAG_SIZE is the size (bp) of the fragments generated here
        
        ( READ_SIZE / FRAG_SIZE ) calculates the average percentage of a
        fragment which will be sequenced.
        
        READ_COVERAGE is desired final average coverage level per nucleotide
        
        FRAG_COVERAGE is calculated from all of the above factors and is used to
        calculate the probability of a fragment being generated at each location



USAGE:
    
    python27 Generate_Fragments.py <input_folder> [-o <output_filepath] [-d
            <depth_of_coverage>] [-c N|G|U <stdev>|<alpha>|<max_dist>] [-r
            <read_length>] [-l <avg_frag_len>] [-f N|G|U
            <stdev>|<alpha>|<max_dist>]



MANDATORY:
    
    input_folder
        
        The filepath of the input folder containing the FASTA file(s) from
        which the DNA fragments will be generated.

OPTIONAL:
    
    output_filepath
        
        (DEFAULT path generation available)
        
        The filepath of the output file where resultant FASTA files will be
        output into.
    
    depth_of_coverage
        
        (DEFAULT: 10)
        
        The average number of times a nucleotide will be "sequenced". If no
        read length is specified, or if a read length of -1 is specified, then
        it is assumed that each fragment is sequenced completely, without
        overlap.
    
    read_length
        
        (DEFAULT: -1)
        
        The number of nucleotides covered by each read or read-pair.
    
    avg_frag_len
        
        (DEFAULT: 500)
        
        The average length of the fragments to be produced.
    
    N|G|U
        
        (DEFAULT (-c): G)
        (DEFAULT (-f): N)
        
        The probasbility distribution used to generate fragments and determine
        fragment length.
            
            N   Normal variate distribution
            G   Gama variate distribution
            U   Uniform distribution
    
    stdev
        
        (Only applies if a Normal Variate distribution was specified)
        (DEFAULT: 50)
        
        The standard deviation of the normal distribution.
    
    alpha
        
        (Only applies if a Gamma Variate distribution was specified)
        (DEFAULT: 1)
        
        The standard Alpha of the Gamma distribution function. The Beta value is
        automatically calculated, such that ALPHA*BETA = 1. (To ensure that the
        resulting average coverage or average fragment length is what was
        specified is the one which by the user.)
        
        A gamma variate distribution is right-tailed, with most values
        clustered to the left of the mean.
        
        A negative alpha may be specified to obtain a flipped and shifted
        gamma variate distribution, which will be left-tailed, with most values
        clusterd to the right of the mean. Please note that this is an
        unorthodox method. A better method should be implemented and used if
        users need a high fidelity left-tailed distribution.
        
        The magnitude of @alpha determines how unskewed the distribution is. As
        @alpha approaches infinity, the resulting gamma distribution will begin
        to resemble a normal distribution. As @alpha approaches 0, the resulting
        gamma distribution will become increasingly skewed.
        
    max_dist
        
        (Only applies if a Uniform distribution was specified)
        (DEFAULT: <depth_of_coverage>)
        
        The furthest away from the specified average which a randomly generated
        value can be. Cannot exceed the average. If @max_dist equals or exceeds
        the average, then the uniform distribution range will be from 0 to
        double whatever the average is.
        
        Ex. If it is specified that the average fragment length is 500 and that
        the fragments are to follow a uniform distribution with a @max_dist of
        50, then all fragment lengths will be between 450 and 550 in length.
    
    (-c)
        
        Used to signify that the following parameters pertain to the probability
        distribution of read/fragment coverage.
        Ex. "-c G 1.0" signifies that the coverage of nucleotides follows a
        gamma variate distribution with an Alpha of 1.0. (The average coverage
        is specified using the "-d" flag.)
    
    (-f)
        
        Used to signify that the following parameters pertain to the probability
        distribution of fragment sizes.
        Ex. "-c N 50" signifies that the fragment sizes follow a normal
        distribution, with a standard deviation of 50. (The average read length
        is specified using the "-r" flag.)



EXAMPLES SCENARIO EXPLANATION:
    
    1:
    An almost bare minimum use case. (Specifying the output path is not
    mandatory, but it is good practice to do so.)
    
    2:
    The "fragments" will be pair-end sequenced with 2x75 reads, hence "-r 150".
    Since only 150 of the 500 bp will be sequenced, more fragments will be
    generated to ensure that the final coverage levels will be the 10. (Default
    depth of coverage)
    
    3:
    The "fragments" were generated by hydrolysis with an average length of 400,
    and a modestly left skew. (Gamma variate distribution with an Alpha of 1)
    
    4:
    Some parts of the genome were less accessible during the fragmentation and
    amplification procedure, so coverage is heavily skewed. Some parts of the
    genome have very deep coverage, while other parts have very little. Note
    that this probability distribution has been done on a base-pair level rather
    than a loci level, and is thus, not a good imitation of the biological
    phenomenon described.
    
    5:
    The sonication and subsequent size selection steps were carried out poorly,
    resulting in a normally distributed, but broadly distributed range of
    fragment sizes. (Standard deviation of 200)
    
    6:
    The "fragments" are uniformly distributed in size, between 500bp and 600bp.
    The average is specified as 550, while the maximum distance is specified as
    50 to achieve this outcome.
    
    7:
    The "fragments" are all exactly 800bp in size. To achieve this, the average
    is specified as 800, and the distribution of fragment sizes is specified as
    a normal distribution with a standard deviation of 0.

EXAMPLES:
    
    python27 Generate_Fragments.py Path/GenomeFolder -o Output.fa
    
    python27 Generate_Fragments.py Path/GenomeFolder -r 150
    
    python27 Generate_Fragments.py Path/GenomeFolder -l 400 -f G 1
    
    python27 Generate_Fragments.py Path/GenomeFolder -c G 0.1
    
    python27 Generate_Fragments.py Path/GenomeFolder -f N 200
    
    ----------------------------------------------------------------------------
    
    python27 Generate_Fragments.py Path/GenomeFolder -l 550 -f U 50
    
    python27 Generate_Fragments.py Path/GenomeFolder -l 800 -f N 0

USAGE:
    
    python27 Generate_Fragments.py <input_folder> [-o <output_filepath] [-d
            <depth_of_coverage>] [-c N|G|U <stdev>|<alpha>|<max_dist>] [-r
            <read_length>] [-l <avg_frag_len>] [-f N|G|U
            <stdev>|<alpha>|<max_dist>]
"""

NAME = "Generate_Fragments.py"



# Configurations ###############################################################

AUTORUN = True

WRITE_PREVENT = False # Completely prevent overwritting existing files
WRITE_CONFIRM = True # Check to confirm overwritting existing files

PRINT_ERRORS = True
PRINT_PROGRESS = True
PRINT_METRICS = True



# Minor Configurations #########################################################

FILEMOD__FASTA = ".fa"



# Defaults #####################################################################
"NOTE: altering these will not alter the values displayed in the HELP DOC"
    
DEFAULT__depth = 10
DEFAULT__read_len = -1
DEFAULT__frag_len = 500
DEFAULT__cov_dist = 1 # DIST.GAMMA = 1. Alter this if the DIST enum is altered
DEFAULT__cov_num = 1
DEFAULT__frag_dist = 0 # DIST.NORMAL = 0. Alter this if the DIST enum is altered
DEFAULT__frag_num = 50



# Imported Modules #############################################################

import sys
import os

import random as Random



import _Controlled_Print as PRINT
from _Command_Line_Parser import *

from Chr_FASTA_File_Reader import *



# Enums ########################################################################

class DIST: # For Distribution
    NORMAL=0 # If this is changed, sync relevant defaults
    GAMMA=1
    UNIFORM=2



# Strings ######################################################################

STR__use_help = "\nUse the -h option for help:\n\t python "\
"Generate_Fragments.py -h"



STR__invalid_dist = """
ERROR: Invalid statistical distirbution: {s}
Please specify one of:
    NORMAL
    GAMMA
    UNIFORM"""



STR__GenFrags_begin = "\nRunning Generate_Random_Chromosomes..."

STR__GenFrags_complete = "\nGenerate_Random_Chromosomes successfully finished."



# String Lists #################################################################

STR_LIST__specify_dist_param = [ # Indexes are based on the DIST enum
"""
ERROR: Please specify the standard deviation you want your normal distribution
to have. The standard deviations must be a positive number.""","""
ERROR: Please specify the alpha you want your gamma distribution to have. If the
alpha ius negative, a flipped and shifted gamma distribution will be applied
instead of a normal gamma distribution.""","""
ERROR: Please specify the maximum distance from the average you want your
uniformly distributed values to have. The maximum distance must be a
non-negative number."""]




"""
NOTES: (Delete later)
def Test(multiplier, alpha, beta):
	total = 0
	for i in range(1000000):
		x = int(random.gammavariate(alpha, beta) * 0.5 * multiplier + 0.5)
		total += x
	print total/1000000.0

def Test2(multiplier, alpha, beta):
	total = 0
	count = 0
	for i in range(100):
		if multiplier > 0:
			x = int(random.gammavariate(alpha, beta) * multiplier + 0.5)
			if x > multiplier: count += 1
		else:
			x = int(random.gammavariate(alpha, beta) * multiplier + 0.5) + -2 * multiplier
			if x > -multiplier: count += 1
		total += x
		print x
	print
	print count
	print total/100.0
"""


